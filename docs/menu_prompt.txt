INSTRUCTION:
implement a pre-launch configuration menu into `.\main.py`, for the pre-launch setup of `.\data\persistent_settings.yaml`, before `.\scripts\main.py` is imported into `.\main`, is that possible? the yaml will be having its own text interface with numbered menu...
1. with numbered main menu with options for... 
```
=================================================
                  AutoCPP-Lite
-------------------------------------------------

          1. Program Settings,

          2. Session Settings,

          3. System Settings,

          4. LLM Model Settings,

          5. Browsing Settings.

=================================================
Selection; Menu Options = 1-5, Begin AutoCPP-Lite = B, Exit and Save = X:
```
...input would be on the same line as the prompt, and dont change the prompt, additionally there will have to be 2 new functions, for printing the separators, and ensure to make them a width of 120.
2. with numbered submenus with options and a different submenu prompt, where begin has been replaced by back, and exit is unavailable, for example... 
```
=================================================
                  AutoCPP-Lite
-------------------------------------------------

          1. execute_local_commands,
                    (Allow)
          2. continuous_mode,
                    (false)
          3. continuous_limit,
                      (0)
          4. debug_mode,
                   (false)

=================================================
Selection; Options = 1-#, Back To Main = B:
```
- it would require the loading of the `.\data\persistent_settings.yaml` into relating globals in ".\main.py` at the start of `.\main.py` using the yaml functions in `.\scripts\utilities.py`., then human interaction with the menu would change the values in the globals, and then when the user selects, `Begin AutoCPP-Lite = B` or `Exit and Save = X`, then, and only then it will save the globals in `.\main.py` to the yaml. each time the user changes a value in the menu, then it will save that to the relating global in `.\main.py`, and re-print the display, and each time the display is re-drawn, it will read from the globals. 

- In `.\main.py`, where we are implementing the menu, and also where the entry point is, and an exit section...
```
**globals for loading to and from the, menu and yaml**

***menus displays and relating processes***

:begin_autocpp-lite
print Importing .\scripts\main.py
*waits 2 seconds*
from scripts.main import main
print .\scripts\main.py Finished.
*waits 2 seconds*
print Exiting .\main.py
*waits 5 seconds*
*exits python script*

:exit_and_save
Print Exititing and Saving...
**saves globals to .\data\persistent_settings.py**
print Settings Saved To Yaml.
*wait 2 seconds*
Print Exititing Configurator
*wait 5 seconds*
*exits python script*
```


RESOURCE:
Here is the current `.\main.py`...
```
from scripts.main import main
```

RESOURCE:
Here is the current `.\data\persistent_settings.yaml`, ensure to gain a list of all of the keys, and ensure that the menu displays them all correctly, as relatingly shown...
```
the relevant yaml
```

RESOURCE:
Here is `.\scripts\utilities.py`, we need to inspect this to determine how the code is currently working for the yaml, so that `.\main.py` is displayed correctly...
```
relevant script(s) with relating functions
```

